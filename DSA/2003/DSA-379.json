{
	"schema_version": "1.6.0",
	"id": "DSA-379",
	"modified": "2019-03-31T21:35:49Z",
	"published": "2003-09-11T00:00:00Z",
	"related": [
		"CVE-2003-0773",
		"CVE-2003-0774",
		"CVE-2003-0775",
		"CVE-2003-0776",
		"CVE-2003-0777",
		"CVE-2003-0778"
	],
	"summary": "sane-backends - several vulnerabilities",
	"details": "\nAlexander Hvostov, Julien Blache and Aurelien Jarno discovered several\nsecurity-related problems in the sane-backends package, which contains\nan API library for scanners including a scanning daemon (in the\npackage libsane) that can be remotely exploited. These problems allow\na remote attacker to cause a segmentation fault and/or consume arbitrary\namounts of memory. The attack is successful, even if the attacker's\ncomputer isn't listed in saned.conf.\n\n\nYou are only vulnerable if you actually run saned e.g. in xinetd or\ninetd. If the entries in the configuration file of xinetd or inetd\nrespectively are commented out or do not exist, you are safe.\n\n\nTry \"`telnet localhost 6566`\" on the server that may run saned.\nIf you\nget \"connection refused\" saned is not running and you are safe.\n\n\nThe Common Vulnerabilities and Exposures project identifies the\nfollowing problems:\n\n* [CAN-2003-0773](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0773):\n\nsaned checks the identity (IP address) of the remote host only\n after the first communication took place (SANE\\_NET\\_INIT). So\n everyone can send that RPC, even if the remote host is not allowed\n to scan (not listed in saned.conf).\n* [CAN-2003-0774](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0774):\n\nsaned lacks error checking nearly everywhere in the code. So\n connection drops are detected very late. If the drop of the\n connection isn't detected, the access to the internal wire buffer\n leaves the limits of the allocated memory. So random memory \"after\"\n the wire buffer is read which will be followed by a segmentation\n fault.\n* [CAN-2003-0775](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0775):\n\nIf saned expects strings, it mallocs the memory necessary to store\n the complete string after it receives the size of the string. If\n the connection was dropped before transmitting the size, malloc\n will reserve an arbitrary size of memory. Depending on that size\n and the amount of memory available either malloc fails (->saned\n quits nicely) or a huge amount of memory is allocated. Swapping\n and OOM measures may occur depending on the kernel.\n* [CAN-2003-0776](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0776):\n\nsaned doesn't check the validity of the RPC numbers it gets before\n getting the parameters.\n* [CAN-2003-0777](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0777):\n\nIf debug messages are enabled and a connection is dropped,\n non-null-terminated strings may be printed and segmentation faults\n may occur.\n* [CAN-2003-0778](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2003-0778):\n\nIt's possible to allocate an arbitrary amount of memory on the\n server running saned even if the connection isn't dropped. At the\n moment this cannot easily be fixed according to the author.\n Better limit the total amount of memory saned may use (ulimit).\n\n\nFor the stable distribution (woody) this problem has been\nfixed in version 1.0.7-4.\n\n\nFor the unstable distribution (sid) this problem has been fixed in\nversion 1.0.11-1 and later.\n\n\nWe recommend that you upgrade your libsane packages.\n\n\n\n\n",
	"affected": [
		{
			"package": {
				"ecosystem": "Debian:3.0",
				"name": "sane-backends",
				"purl": "pkg:deb/debian/sane-backends?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "1.0.7-4"
						}
					]
				}
			],
			"database_specific": {
				"source": "https://storage.googleapis.com/debian-osv/dsa-osv/DSA-379.json"
			}
		}
	],
	"references": [
		{
			"type": "ADVISORY",
			"url": "https://www.debian.org/security/2003/dsa-379"
		}
	]
}
