{
	"schema_version": "1.6.0",
	"id": "DLA-1518-1",
	"modified": "2023-06-28T06:26:22.161959Z",
	"published": "2018-09-25T00:00:00Z",
	"related": [
		"CVE-2018-0497",
		"CVE-2018-0498",
		"CVE-2018-9988",
		"CVE-2018-9989"
	],
	"summary": "polarssl - security update",
	"details": "\nTwo vulnerabilities were discovered in polarssl, a lightweight crypto and\nSSL/TLS library (nowadays continued under the name mbedtls) which could\nresult in plain text recovery via side-channel attacks.\n\n\nTwo other minor vulnerabilities were discovered in polarssl which could\nresult in arithmetic overflow errors.\n\n\n* [CVE-2018-0497](https://security-tracker.debian.org/tracker/CVE-2018-0497)\nAs a protection against the Lucky Thirteen attack, the TLS code for\n CBC decryption in encrypt-then-MAC mode performs extra MAC\n calculations to compensate for variations in message size due to\n padding. The amount of extra MAC calculation to perform was based on\n the assumption that the bulk of the time is spent in processing\n 64-byte blocks, which is correct for most supported hashes but not for\n SHA-384. Correct the amount of extra work for SHA-384 (and SHA-512\n which is currently not used in TLS, and MD2 although no one should\n care about that).\n\n\nThis is a regression fix for what [CVE-2013-0169](https://security-tracker.debian.org/tracker/CVE-2013-0169) had been fixed this.\n* [CVE-2018-0498](https://security-tracker.debian.org/tracker/CVE-2018-0498)\nThe basis for the Lucky 13 family of attacks is for an attacker to be\n able to distinguish between (long) valid TLS-CBC padding and invalid\n TLS-CBC padding. Since our code sets padlen = 0 for invalid padding,\n the length of the input to the HMAC function gives information about\n that.\n\n\nInformation about this length (modulo the MD/SHA block size) can be\n deduced from how much MD/SHA padding (this is distinct from TLS-CBC\n padding) is used. If MD/SHA padding is read from a (static) buffer, a\n local attacker could get information about how much is used via a\n cache attack targeting that buffer.\n\n\nLet's get rid of this buffer. Now the only buffer used is the\n internal MD/SHA one, which is always read fully by the process()\n function.\n* [CVE-2018-9988](https://security-tracker.debian.org/tracker/CVE-2018-9988)\nPrevent arithmetic overflow on bounds check and add bound check\n before signature length read in ssl\\_parse\\_server\\_key\\_exchange().\n* [CVE-2018-9989](https://security-tracker.debian.org/tracker/CVE-2018-9989)\nPrevent arithmetic overflow on bounds check and add bound check\n before length read in ssl\\_parse\\_server\\_psk\\_hint()\n\n\nFor Debian 8 Jessie, these problems have been fixed in version\n1.3.9-2.1+deb8u4.\n\n\nWe recommend that you upgrade your polarssl packages.\n\n\nFurther information about Debian LTS security advisories, how to apply\nthese updates to your system and frequently asked questions can be\nfound at: <https://wiki.debian.org/LTS>\n\n\n",
	"affected": [
		{
			"package": {
				"ecosystem": "Debian:8",
				"name": "polarssl",
				"purl": "pkg:deb/debian/polarssl?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "1.3.9-2.1+deb8u4"
						}
					]
				}
			],
			"versions": [
				"1.3.9-2.1",
				"1.3.9-2.1+deb8u1",
				"1.3.9-2.1+deb8u2",
				"1.3.9-2.1+deb8u3"
			],
			"database_specific": {
				"source": "https://storage.googleapis.com/debian-osv/dla-osv/DLA-1518-1.json"
			}
		}
	],
	"references": [
		{
			"type": "ADVISORY",
			"url": "https://www.debian.org/lts/security/2018/dla-1518"
		}
	]
}
