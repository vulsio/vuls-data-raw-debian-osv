{
	"schema_version": "1.6.0",
	"id": "CVE-2022-48853",
	"modified": "2024-09-18T03:22:38.385330Z",
	"published": "2024-07-16T13:15:12Z",
	"related": [
		"SUSE-SU-2024:2894-1",
		"SUSE-SU-2024:2902-1",
		"SUSE-SU-2024:2929-1",
		"SUSE-SU-2024:2939-1",
		"SUSE-SU-2024:2947-1",
		"SUSE-SU-2024:3225-1",
		"SUSE-SU-2024:3249-1",
		"UBUNTU-CVE-2022-48853"
	],
	"details": "In the Linux kernel, the following vulnerability has been resolved:\n\nswiotlb: fix info leak with DMA_FROM_DEVICE\n\nThe problem I'm addressing was discovered by the LTP test covering\ncve-2018-1000204.\n\nA short description of what happens follows:\n1) The test case issues a command code 00 (TEST UNIT READY) via the SG_IO\n   interface with: dxfer_len == 524288, dxdfer_dir == SG_DXFER_FROM_DEV\n   and a corresponding dxferp. The peculiar thing about this is that TUR\n   is not reading from the device.\n2) In sg_start_req() the invocation of blk_rq_map_user() effectively\n   bounces the user-space buffer. As if the device was to transfer into\n   it. Since commit a45b599ad808 (\"scsi: sg: allocate with __GFP_ZERO in\n   sg_build_indirect()\") we make sure this first bounce buffer is\n   allocated with GFP_ZERO.\n3) For the rest of the story we keep ignoring that we have a TUR, so the\n   device won't touch the buffer we prepare as if the we had a\n   DMA_FROM_DEVICE type of situation. My setup uses a virtio-scsi device\n   and the  buffer allocated by SG is mapped by the function\n   virtqueue_add_split() which uses DMA_FROM_DEVICE for the \"in\" sgs (here\n   scatter-gather and not scsi generics). This mapping involves bouncing\n   via the swiotlb (we need swiotlb to do virtio in protected guest like\n   s390 Secure Execution, or AMD SEV).\n4) When the SCSI TUR is done, we first copy back the content of the second\n   (that is swiotlb) bounce buffer (which most likely contains some\n   previous IO data), to the first bounce buffer, which contains all\n   zeros.  Then we copy back the content of the first bounce buffer to\n   the user-space buffer.\n5) The test case detects that the buffer, which it zero-initialized,\n  ain't all zeros and fails.\n\nOne can argue that this is an swiotlb problem, because without swiotlb\nwe leak all zeros, and the swiotlb should be transparent in a sense that\nit does not affect the outcome (if all other participants are well\nbehaved).\n\nCopying the content of the original buffer into the swiotlb buffer is\nthe only way I can think of to make swiotlb transparent in such\nscenarios. So let's do just that if in doubt, but allow the driver\nto tell us that the whole mapped buffer is going to be overwritten,\nin which case we can preserve the old behavior and avoid the performance\nimpact of the extra bounce.",
	"severity": [
		{
			"type": "CVSS_V3",
			"score": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N"
		}
	],
	"affected": [
		{
			"package": {
				"ecosystem": "Debian:11",
				"name": "linux",
				"purl": "pkg:deb/debian/linux?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "5.10.113-1"
						}
					]
				}
			],
			"versions": [
				"5.10.103-1",
				"5.10.103-1~bpo10+1",
				"5.10.106-1",
				"5.10.46-4",
				"5.10.46-5",
				"5.10.70-1",
				"5.10.70-1~bpo10+1",
				"5.10.84-1",
				"5.10.92-1",
				"5.10.92-1~bpo10+1",
				"5.10.92-2"
			],
			"ecosystem_specific": {
				"urgency": "not yet assigned"
			},
			"database_specific": {
				"source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2022-48853.json"
			}
		},
		{
			"package": {
				"ecosystem": "Debian:12",
				"name": "linux",
				"purl": "pkg:deb/debian/linux?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "5.16.18-1"
						}
					]
				}
			],
			"ecosystem_specific": {
				"urgency": "not yet assigned"
			},
			"database_specific": {
				"source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2022-48853.json"
			}
		},
		{
			"package": {
				"ecosystem": "Debian:13",
				"name": "linux",
				"purl": "pkg:deb/debian/linux?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "5.16.18-1"
						}
					]
				}
			],
			"ecosystem_specific": {
				"urgency": "not yet assigned"
			},
			"database_specific": {
				"source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2022-48853.json"
			}
		}
	],
	"references": [
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/270475d6d2410ec66e971bf181afe1958dad565e"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/6bfc5377a210dbda2a237f16d94d1bd4f1335026"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/7403f4118ab94be837ab9d770507537a8057bc63"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/8d9ac1b6665c73f23e963775f85d99679fd8e192"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/971e5dadffd02beba1063e7dd9c3a82de17cf534"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/c132f2ba716b5ee6b35f82226a6e5417d013d753"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/d4d975e7921079f877f828099bb8260af335508f"
		},
		{
			"type": "FIX",
			"url": "https://git.kernel.org/stable/c/ddbd89deb7d32b1fbb879f48d68fda1a8ac58e8e"
		},
		{
			"type": "ADVISORY",
			"url": "https://security-tracker.debian.org/tracker/CVE-2022-48853"
		}
	]
}
