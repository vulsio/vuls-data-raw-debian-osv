{
	"schema_version": "1.6.0",
	"id": "CVE-2024-26939",
	"modified": "2025-01-14T12:14:10.066674Z",
	"published": "2024-05-01T06:15:09Z",
	"related": [
		"ALSA-2024:7000",
		"ALSA-2024:7001",
		"DSA-5680-1",
		"RHSA-2024:7000",
		"RHSA-2024:7001",
		"RHSA-2024:9315",
		"RLSA-2024:7001",
		"SUSE-SU-2024:1644-1",
		"SUSE-SU-2024:2008-1",
		"SUSE-SU-2024:2190-1",
		"UBUNTU-CVE-2024-26939",
		"USN-6816-1",
		"USN-6817-1",
		"USN-6817-2",
		"USN-6817-3",
		"USN-6878-1"
	],
	"details": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/i915/vma: Fix UAF on destroy against retire race\n\nObject debugging tools were sporadically reporting illegal attempts to\nfree a still active i915 VMA object when parking a GT believed to be idle.\n\n[161.359441] ODEBUG: free active (active state 0) object: ffff88811643b958 object type: i915_active hint: __i915_vma_active+0x0/0x50 [i915]\n[161.360082] WARNING: CPU: 5 PID: 276 at lib/debugobjects.c:514 debug_print_object+0x80/0xb0\n...\n[161.360304] CPU: 5 PID: 276 Comm: kworker/5:2 Not tainted 6.5.0-rc1-CI_DRM_13375-g003f860e5577+ #1\n[161.360314] Hardware name: Intel Corporation Rocket Lake Client Platform/RocketLake S UDIMM 6L RVP, BIOS RKLSFWI1.R00.3173.A03.2204210138 04/21/2022\n[161.360322] Workqueue: i915-unordered __intel_wakeref_put_work [i915]\n[161.360592] RIP: 0010:debug_print_object+0x80/0xb0\n...\n[161.361347] debug_object_free+0xeb/0x110\n[161.361362] i915_active_fini+0x14/0x130 [i915]\n[161.361866] release_references+0xfe/0x1f0 [i915]\n[161.362543] i915_vma_parked+0x1db/0x380 [i915]\n[161.363129] __gt_park+0x121/0x230 [i915]\n[161.363515] ____intel_wakeref_put_last+0x1f/0x70 [i915]\n\nThat has been tracked down to be happening when another thread is\ndeactivating the VMA inside __active_retire() helper, after the VMA's\nactive counter has been already decremented to 0, but before deactivation\nof the VMA's object is reported to the object debugging tool.\n\nWe could prevent from that race by serializing i915_active_fini() with\n__active_retire() via ref->tree_lock, but that wouldn't stop the VMA from\nbeing used, e.g. from __i915_vma_retire() called at the end of\n__active_retire(), after that VMA has been already freed by a concurrent\ni915_vma_destroy() on return from the i915_active_fini().  Then, we should\nrather fix the issue at the VMA level, not in i915_active.\n\nSince __i915_vma_parked() is called from __gt_park() on last put of the\nGT's wakeref, the issue could be addressed by holding the GT wakeref long\nenough for __active_retire() to complete before that wakeref is released\nand the GT parked.\n\nI believe the issue was introduced by commit d93939730347 (\"drm/i915:\nRemove the vma refcount\") which moved a call to i915_active_fini() from\na dropped i915_vma_release(), called on last put of the removed VMA kref,\nto i915_vma_parked() processing path called on last put of a GT wakeref.\nHowever, its visibility to the object debugging tool was suppressed by a\nbug in i915_active that was fixed two weeks later with commit e92eb246feb9\n(\"drm/i915/active: Fix missing debug object activation\").\n\nA VMA associated with a request doesn't acquire a GT wakeref by itself.\nInstead, it depends on a wakeref held directly by the request's active\nintel_context for a GT associated with its VM, and indirectly on that\nintel_context's engine wakeref if the engine belongs to the same GT as the\nVMA's VM.  Those wakerefs are released asynchronously to VMA deactivation.\n\nFix the issue by getting a wakeref for the VMA's GT when activating it,\nand putting that wakeref only after the VMA is deactivated.  However,\nexclude global GTT from that processing path, otherwise the GPU never goes\nidle.  Since __i915_vma_retire() may be called from atomic contexts, use\nasync variant of wakeref put.  Also, to avoid circular locking dependency,\ntake care of acquiring the wakeref before VM mutex when both are needed.\n\nv7: Add inline comments with justifications for:\n    - using untracked variants of intel_gt_pm_get/put() (Nirmoy),\n    - using async variant of _put(),\n    - not getting the wakeref in case of a global GTT,\n    - always getting the first wakeref outside vm->mutex.\nv6: Since __i915_vma_active/retire() callbacks are not serialized, storing\n    a wakeref tracking handle inside struct i915_vma is not safe, and\n    there is no other good place for that.  Use untracked variants of\n    intel_gt_pm_get/put_async().\nv5: Replace \"tile\" with \"GT\" across commit description (Rodrigo),\n  - \n---truncated---",
	"affected": [
		{
			"package": {
				"ecosystem": "Debian:12",
				"name": "linux",
				"purl": "pkg:deb/debian/linux?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "6.1.90-1"
						}
					]
				}
			],
			"versions": [
				"6.1.27-1",
				"6.1.37-1",
				"6.1.38-1",
				"6.1.38-2",
				"6.1.38-2~bpo11+1",
				"6.1.38-3",
				"6.1.38-4",
				"6.1.38-4~bpo11+1",
				"6.1.52-1",
				"6.1.55-1",
				"6.1.55-1~bpo11+1",
				"6.1.64-1",
				"6.1.66-1",
				"6.1.67-1",
				"6.1.69-1",
				"6.1.69-1~bpo11+1",
				"6.1.76-1",
				"6.1.76-1~bpo11+1",
				"6.1.82-1",
				"6.1.85-1",
				"6.1.90-1~bpo11+1"
			],
			"ecosystem_specific": {
				"urgency": "not yet assigned"
			},
			"database_specific": {
				"source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-26939.json"
			}
		},
		{
			"package": {
				"ecosystem": "Debian:13",
				"name": "linux",
				"purl": "pkg:deb/debian/linux?arch=source"
			},
			"ranges": [
				{
					"type": "ECOSYSTEM",
					"events": [
						{
							"introduced": "0"
						},
						{
							"fixed": "6.8.9-1"
						}
					]
				}
			],
			"versions": [
				"6.1.106-1",
				"6.1.106-2",
				"6.1.106-3",
				"6.1.112-1",
				"6.1.115-1",
				"6.1.119-1",
				"6.1.123-1",
				"6.1.124-1",
				"6.1.27-1",
				"6.1.37-1",
				"6.1.38-1",
				"6.1.38-2",
				"6.1.38-2~bpo11+1",
				"6.1.38-3",
				"6.1.38-4",
				"6.1.38-4~bpo11+1",
				"6.1.52-1",
				"6.1.55-1",
				"6.1.55-1~bpo11+1",
				"6.1.64-1",
				"6.1.66-1",
				"6.1.67-1",
				"6.1.69-1",
				"6.1.69-1~bpo11+1",
				"6.1.76-1",
				"6.1.76-1~bpo11+1",
				"6.1.82-1",
				"6.1.85-1",
				"6.1.90-1",
				"6.1.90-1~bpo11+1",
				"6.1.94-1",
				"6.1.94-1~bpo11+1",
				"6.1.98-1",
				"6.1.99-1",
				"6.3.1-1~exp1",
				"6.3.11-1",
				"6.3.2-1~exp1",
				"6.3.4-1~exp1",
				"6.3.5-1~exp1",
				"6.3.7-1",
				"6.3.7-1~bpo12+1",
				"6.4.1-1~exp1",
				"6.4.11-1",
				"6.4.13-1",
				"6.4.4-1",
				"6.4.4-1~bpo12+1",
				"6.4.4-2",
				"6.4.4-3",
				"6.4.4-3~bpo12+1",
				"6.4~rc6-1~exp1",
				"6.4~rc7-1~exp1",
				"6.5.1-1~exp1",
				"6.5.10-1",
				"6.5.10-1~bpo12+1",
				"6.5.13-1",
				"6.5.3-1",
				"6.5.3-1~bpo12+1",
				"6.5.6-1",
				"6.5.8-1",
				"6.5~rc4-1~exp1",
				"6.5~rc6-1~exp1",
				"6.5~rc7-1~exp1",
				"6.6.11-1",
				"6.6.13-1",
				"6.6.13-1~bpo12+1",
				"6.6.15-1",
				"6.6.15-2",
				"6.6.3-1~exp1",
				"6.6.4-1~exp1",
				"6.6.7-1~exp1",
				"6.6.8-1",
				"6.6.9-1",
				"6.7-1~exp1",
				"6.7.1-1~exp1",
				"6.7.12-1",
				"6.7.12-1~bpo12+1",
				"6.7.4-1~exp1",
				"6.7.7-1",
				"6.7.9-1",
				"6.7.9-2"
			],
			"ecosystem_specific": {
				"urgency": "not yet assigned"
			},
			"database_specific": {
				"source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-26939.json"
			}
		}
	],
	"references": [
		{
			"type": "WEB",
			"url": "https://git.kernel.org/stable/c/0e45882ca829b26b915162e8e86dbb1095768e9e"
		},
		{
			"type": "WEB",
			"url": "https://git.kernel.org/stable/c/59b2626dd8c8a2e13f18054b3530e0c00073d79f"
		},
		{
			"type": "WEB",
			"url": "https://git.kernel.org/stable/c/5e3eb862df9f972ab677fb19e0d4b9b1be8db7b5"
		},
		{
			"type": "WEB",
			"url": "https://git.kernel.org/stable/c/704edc9252f4988ae1ad7dafa23d0db8d90d7190"
		},
		{
			"type": "ADVISORY",
			"url": "https://security-tracker.debian.org/tracker/CVE-2024-26939"
		}
	]
}
